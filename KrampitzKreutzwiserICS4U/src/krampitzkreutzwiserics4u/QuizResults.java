/*
 * Evan Kreutzwiser
 * Nov 4, 2020
 * Displays the results of the user's test, showing every question and what the 
 * correct answer and the user's answer is. The results are marked-up with html.
 */
package krampitzkreutzwiserics4u;

import java.util.ArrayList; // Dynamically sized question array

/**
 *
 * @author Evan
 */
public class QuizResults extends javax.swing.JFrame {

    private final MainMenu mainMenuFrame;
    
    /**
     * Create a new quiz results windows (QuizResults)
     * @param m The main menu to return to when back is clicked
     */
    public QuizResults(MainMenu m) {
        // Initialize the window
        initComponents();
    
        // Save a reference to the main menu so it can be shown again when back is clicked
        mainMenuFrame = m;
    }

    public void loadQuizData() {
    
        // Get the question data from the quiz window
        ArrayList<Question> questions = QuizUI.getQuizQuestions();
        
        // Start the html formatting for the output text
        String outputHtml = "<html><div style=\"line-height: 15px; width: 100%;\">\n";
        
        // Declare other variables
        int numCorrectAnswers = 0;
        Question questionRef;
          
        // Count how many the questions user got right
        for (Question question : questions) { // Loops through every question
            // If the user answered correctly
            if (question.isCorrect()) {
                // Increment the number of correct answers
                numCorrectAnswers++;
            }
        }
        
        // Display the user's score. Show the number of answers correct
        outputHtml += "<h1>Score: " + numCorrectAnswers + "/" + questions.size() + ", "
                // and as a percentage
                + ((numCorrectAnswers*100)/questions.size()) + "%</h1>\n";
        
        for (int i = 0; i < questions.size(); i++) {
            
            // Get a reference to the question
            questionRef = questions.get(i);
            
            // Add a header
            outputHtml += "<br>\n<h2>Question " + (i+1) + "</h2>\n";
            
            // Add the question in large text
            outputHtml += "<h2>" + questionRef.getQuestion() + "</h2>\n";
            
            // Print the answers and highlight correct/incorrect answers
            for (int j = 1; j <= 4; j++) {
                
                outputHtml += "<h3";
                
                // If this is the correct answer
                if (questionRef.getCorrectAnswer() == j) {
                    // Insert html styling to highlight the line green
                    outputHtml += " style=\"background-color: #ddffdd\"";
                }
                // If this is not the correct answer, but the user picked this answer, 
                else if (questionRef.getUserAnswer() == j) {
                    // Insert html styling to highlight the line red, since the user was wrong
                    outputHtml += " style=\"background-color: #ffe0dd\"";
                }
                
                // Add the answer's text and the answer number (1-4) to the output
                outputHtml += "> " + (j) + ": " + questionRef.getChoice(j);

                // If this is the correct answer
                if (questionRef.getCorrectAnswer() == j) {
                    // Insert html styling to highlight the line green
                    outputHtml += " &#60; Correct answer";
                }
                // If this is not the correct answer, but the user picked this answer, 
                else if (questionRef.getUserAnswer() == j) {
                    // Insert html styling to highlight the line red, since the user was wrong
                    outputHtml += " &#60; Your answer";
                }

                // Close off the html tag
                outputHtml +=  "</h3>\n";
            }

        }
        
        // Close off the string's html
        outputHtml += "</div></html>\n";
        
        resultsHtml.setText(outputHtml);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        quizResultsLabel = new javax.swing.JLabel();
        scrollContainer = new javax.swing.JScrollPane();
        resultsHtml = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backBtn.setText("< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        quizResultsLabel.setText("Quiz Results:");

        scrollContainer.setViewportView(resultsHtml);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollContainer)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backBtn)
                            .addComponent(quizResultsLabel))
                        .addGap(0, 399, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(quizResultsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backBtn)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The event triggered when the back button is pressed. Returns to the main menu
     * @param evt The event generated by the click (Unused)
     */
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // Make the main menu visible
        mainMenuFrame.setVisible(true);
        
        // Hide ths results window
        this.setVisible(false);
    }//GEN-LAST:event_backBtnActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel quizResultsLabel;
    private javax.swing.JLabel resultsHtml;
    private javax.swing.JScrollPane scrollContainer;
    // End of variables declaration//GEN-END:variables
}
